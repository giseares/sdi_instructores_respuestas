<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Entrevistas - Centros de Buceo</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/lucide-react@0.263.1/dist/umd/lucide-react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useRef, useEffect } = React;
        const { Mic, Square, Play, Pause, RotateCcw, ArrowRight, ArrowLeft, Download, Check, User } = lucideReact;

        const InterviewSystem = () => {
          const [currentStep, setCurrentStep] = useState('setup'); // 'setup', 'interview', 'summary'
          const [userName, setUserName] = useState('');
          const [currentQuestion, setCurrentQuestion] = useState(0);
          const [isRecording, setIsRecording] = useState(false);
          const [isPlaying, setIsPlaying] = useState(false);
          const [mediaRecorder, setMediaRecorder] = useState(null);
          const [stream, setStream] = useState(null);
          const [responses, setResponses] = useState({});
          const [isGeneratingZip, setIsGeneratingZip] = useState(false);
          const [showSummary, setShowSummary] = useState(false);

          const videoRef = useRef(null);
          const playbackRef = useRef(null);

          const questions = [
            { id: 1, text: "¿Cómo se llama tu centro de buceo y qué lo hace único en tu región?" },
            { id: 2, text: "¿Cuántos años de experiencia tienes en el buceo y qué certificaciones posees?" },
            { id: 3, text: "¿Qué tipos de cursos de buceo ofreces y cuál es tu especialidad?" },
            { id: 4, text: "¿Cuáles son los mejores sitios de buceo en tu área y qué los hace especiales?" },
            { id: 5, text: "¿Qué tipo de vida marina pueden esperar ver los buceadores en tus tours?" },
            { id: 6, text: "¿Cómo adaptas tus servicios para buceadores principiantes vs. experimentados?" },
            { id: 7, text: "¿Qué medidas de seguridad implementas en tus operaciones de buceo?" },
            { id: 8, text: "¿Cuál es la mejor época del año para bucear en tu zona y por qué?" },
            { id: 9, text: "¿Qué equipo de buceo proporcionas y cuál recomiendas que traigan los clientes?" },
            { id: 10, text: "¿Tienes alguna historia memorable o experiencia especial que te gustaría compartir?" }
          ];

          useEffect(() => {
            return () => {
              if (stream) {
                stream.getTracks().forEach(track => track.stop());
              }
            };
          }, [stream]);

          const setupCamera = async () => {
            try {
              const mediaStream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
              });
              setStream(mediaStream);
              if (videoRef.current) {
                videoRef.current.srcObject = mediaStream;
              }
            } catch (err) {
              console.error('Error accessing camera:', err);
              alert('No se pudo acceder a la cámara. Por favor, asegúrate de dar permisos.');
            }
          };

          const startInterview = async () => {
            if (!userName.trim()) {
              alert('Por favor ingresa tu nombre');
              return;
            }
            await setupCamera();
            setCurrentStep('interview');
          };

          const startRecording = () => {
            if (!stream) return;

            const recorder = new MediaRecorder(stream, {
              mimeType: 'video/webm'
            });

            const chunks = [];
            const startTime = Date.now();

            recorder.ondataavailable = (event) => {
              if (event.data.size > 0) {
                chunks.push(event.data);
              }
            };

            recorder.onstop = () => {
              const blob = new Blob(chunks, { type: 'video/webm' });
              const duration = (Date.now() - startTime) / 1000;
              const videoUrl = URL.createObjectURL(blob);
              
              const currentQ = questions[currentQuestion];
              setResponses(prev => ({
                ...prev,
                [currentQ.id]: {
                  blob,
                  url: videoUrl,
                  duration
                }
              }));
            };

            recorder.start();
            setMediaRecorder(recorder);
            setIsRecording(true);
          };

          const stopRecording = () => {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
              mediaRecorder.stop();
              setIsRecording(false);
              // No reproducir automáticamente después de grabar
            }
          };

          const playResponse = (questionId) => {
            const response = responses[questionId];
            if (response && playbackRef.current) {
              if (isPlaying) {
                playbackRef.current.pause();
                setIsPlaying(false);
              } else {
                playbackRef.current.src = response.url;
                playbackRef.current.play();
                setIsPlaying(true);
                
                playbackRef.current.onended = () => {
                  setIsPlaying(false);
                };
              }
            }
          };

          const deleteResponse = (questionId) => {
            setResponses(prev => {
              const newResponses = { ...prev };
              if (newResponses[questionId]) {
                URL.revokeObjectURL(newResponses[questionId].url);
                delete newResponses[questionId];
              }
              return newResponses;
            });
          };

          const handleNext = () => {
            const current = questions[currentQuestion];
            const hasResponse = responses[current.id];
            
            if (!hasResponse) {
              const shouldContinue = window.confirm(
                "No has grabado una respuesta para esta pregunta. ¿Quieres grabar una respuesta antes de continuar o prefieres continuar sin grabar?"
              );
              
              if (!shouldContinue) {
                return; // No continuar, quedarse en la pregunta actual
              }
            }
            
            if (currentQuestion < questions.length - 1) {
              setCurrentQuestion(prev => prev + 1);
            } else {
              setShowSummary(true);
            }
          };

          const handlePrevious = () => {
            if (currentQuestion > 0) {
              setCurrentQuestion(prev => prev - 1);
            }
          };

          const finishInterview = () => {
            setCurrentStep('summary');
            if (stream) {
              stream.getTracks().forEach(track => track.stop());
            }
          };

          const downloadZip = () => {
            setIsGeneratingZip(true);
            
            setTimeout(() => {
              const zip = new JSZip();
              const answeredQuestions = questions.filter(q => responses[q.id]);
              
              // Agregar archivo README
              let readmeContent = `# Entrevista Completada - ${userName}\n\n`;
              readmeContent += `Fecha: ${new Date().toLocaleDateString('es-ES')}\n`;
              readmeContent += `Preguntas respondidas: ${answeredQuestions.length}/${questions.length}\n\n`;
              readmeContent += `## Preguntas y Respuestas\n\n`;
              
              answeredQuestions.forEach((q) => {
                readmeContent += `${q.id}. ${q.text}\n`;
                readmeContent += `   ✅ Respondida (${Math.round(responses[q.id].duration)}s grabados)\n`;
                readmeContent += `   Archivo: Q${q.id}_${userName}.webm\n\n`;
              });
              
              zip.file("README.md", readmeContent);
              
              // Agregar videos
              answeredQuestions.forEach((q) => {
                if (responses[q.id]?.blob) {
                  zip.file(`Q${q.id}_${userName}.webm`, responses[q.id].blob);
                }
              });
              
              zip.generateAsync({type: "blob"})
                .then(content => {
                  const url = URL.createObjectURL(content);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `Entrevista_${userName}_${new Date().toISOString().split('T')[0]}.zip`;
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                  URL.revokeObjectURL(url);
                  setIsGeneratingZip(false);
                });
            }, 100);
          };

          if (currentStep === 'setup') {
            return (
              <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
                <div className="max-w-2xl mx-auto">
                  <div className="bg-white rounded-2xl shadow-xl p-8">
                    <div className="text-center mb-8">
                      <h1 className="text-3xl font-bold text-gray-800 mb-4">
                        Sistema de Entrevistas para Centros de Buceo
                      </h1>
                      <p className="text-gray-600">
                        Responde las preguntas grabando videos cortos para promocionar tu centro de buceo
                      </p>
                    </div>

                    <div className="mb-6">
                      <label className="flex items-center gap-2 text-lg font-medium text-gray-700 mb-3">
                        <User className="w-5 h-5" />
                        Tu nombre o nombre del centro de buceo:
                      </label>
                      <input
                        type="text"
                        value={userName}
                        onChange={(e) => setUserName(e.target.value)}
                        className="w-full p-4 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-lg"
                        placeholder="Ej: Juan Pérez - Centro de Buceo Coral"
                      />
                    </div>

                    <button
                      onClick={startInterview}
                      className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-6 rounded-lg transition-colors text-lg"
                    >
                      Comenzar Entrevista
                    </button>
                  </div>
                </div>
              </div>
            );
          }

          if (currentStep === 'interview' && !showSummary) {
            const currentQ = questions[currentQuestion];
            const hasResponse = responses[currentQ.id];

            return (
              <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
                <div className="max-w-4xl mx-auto">
                  <div className="bg-white rounded-2xl shadow-xl p-6">
                    <div className="mb-6">
                      <div className="flex justify-between items-center mb-4">
                        <h2 className="text-2xl font-bold text-gray-800">
                          Pregunta {currentQuestion + 1} de {questions.length}
                        </h2>
                        <div className="text-lg font-medium text-blue-600">
                          {userName}
                        </div>
                      </div>
                      
                      <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
                        <div 
                          className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                          style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
                        ></div>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-6">
                      <div>
                        <div className="mb-6">
                          <h3 className="text-xl font-semibold text-gray-800 mb-4">
                            {currentQ.text}
                          </h3>
                        </div>

                        <div className="bg-black rounded-lg overflow-hidden mb-4">
                          <video
                            ref={videoRef}
                            autoPlay
                            muted
                            className="w-full h-64 object-cover"
                          />
                        </div>

                        <div className="flex gap-3 mb-4">
                          {!isRecording ? (
                            <button
                              onClick={startRecording}
                              className="flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                            >
                              <Mic className="w-5 h-5" />
                              Grabar Respuesta
                            </button>
                          ) : (
                            <button
                              onClick={stopRecording}
                              className="flex items-center gap-2 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                            >
                              <Square className="w-5 h-5" />
                              Detener Grabación
                            </button>
                          )}

                          {hasResponse && (
                            <>
                              <button
                                onClick={() => playResponse(currentQ.id)}
                                className="flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                              >
                                {isPlaying ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
                                {isPlaying ? 'Pausar' : 'Reproducir'}
                              </button>

                              <button
                                onClick={() => deleteResponse(currentQ.id)}
                                className="flex items-center gap-2 bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                              >
                                <RotateCcw className="w-5 h-5" />
                                Regrabar
                              </button>
                            </>
                          )}
                        </div>

                        {hasResponse && (
                          <div className="bg-green-50 border-l-4 border-green-400 p-4 mb-4">
                            <div className="flex items-center gap-2 text-green-700">
                              <Check className="w-5 h-5" />
                              <span className="font-medium">
                                Respuesta grabada ({Math.round(hasResponse.duration)}s)
                              </span>
                            </div>
                          </div>
                        )}

                        <video ref={playbackRef} className="hidden" controls />

                        <div className="flex justify-between">
                          <button
                            onClick={handlePrevious}
                            disabled={currentQuestion === 0}
                            className={`flex items-center gap-2 px-6 py-3 rounded-lg font-medium transition-colors ${
                              currentQuestion === 0
                                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                : 'bg-gray-600 hover:bg-gray-700 text-white'
                            }`}
                          >
                            <ArrowLeft className="w-5 h-5" />
                            Anterior
                          </button>

                          <button
                            onClick={handleNext}
                            className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                          >
                            {currentQuestion === questions.length - 1 ? 'Finalizar' : 'Siguiente'}
                            <ArrowRight className="w-5 h-5" />
                          </button>
                        </div>
                      </div>

                      <div className="bg-gray-50 rounded-lg p-4">
                        <h4 className="font-semibold text-gray-800 mb-4">Progreso de la Entrevista</h4>
                        <div className="space-y-3">
                          {questions.map((q, index) => (
                            <div
                              key={q.id}
                              className={`p-3 rounded-lg border-2 transition-colors ${
                                index === currentQuestion
                                  ? 'border-blue-500 bg-blue-50'
                                  : responses[q.id]
                                  ? 'border-green-300 bg-green-50'
                                  : 'border-gray-200 bg-white'
                              }`}
                            >
                              <div className="text-sm font-medium text-gray-800">
                                {q.id}. {q.text.substring(0, 60)}...
                              </div>
                              {responses[q.id] && (
                                <div className="flex items-center gap-2 text-green-600 text-sm">
                                  <Check className="w-4 h-4" />
                                  Respondida ({Math.round(responses[q.id].duration)}s grabados)
                                  <div className="text-xs text-gray-500">
                                    Archivo: Q{q.id}_{userName}.webm
                                  </div>
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          }

          if (currentStep === 'interview' && showSummary) {
            return (
              <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
                <div className="max-w-4xl mx-auto">
                  <div className="bg-white rounded-2xl shadow-xl p-8">
                    <div className="text-center mb-8">
                      <h2 className="text-3xl font-bold text-gray-800 mb-4">
                        ¿Quieres finalizar la entrevista?
                      </h2>
                      <p className="text-gray-600">
                        Has respondido {Object.keys(responses).length} de {questions.length} preguntas
                      </p>
                    </div>

                    <div className="grid md:grid-cols-2 gap-6 mb-8">
                      <div className="bg-green-50 p-6 rounded-lg">
                        <h3 className="font-semibold text-green-800 mb-3">Preguntas Respondidas</h3>
                        <div className="space-y-2">
                          {questions.filter(q => responses[q.id]).map(q => (
                            <div key={q.id} className="flex items-center gap-2 text-green-700 text-sm">
                              <Check className="w-4 h-4" />
                              Pregunta {q.id} ({Math.round(responses[q.id].duration)}s grabados)
                            </div>
                          ))}
                        </div>
                      </div>

                      <div className="bg-orange-50 p-6 rounded-lg">
                        <h3 className="font-semibold text-orange-800 mb-3">Preguntas Pendientes</h3>
                        <div className="space-y-2">
                          {questions.filter(q => !responses[q.id]).map(q => (
                            <div key={q.id} className="text-orange-700 text-sm">
                              Pregunta {q.id}: {q.text.substring(0, 40)}...
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-center gap-4">
                      <button
                        onClick={() => setShowSummary(false)}
                        className="flex items-center gap-2 bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                      >
                        <ArrowLeft className="w-5 h-5" />
                        Continuar Respondiendo
                      </button>

                      <button
                        onClick={finishInterview}
                        className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                      >
                        Finalizar Entrevista
                        <ArrowRight className="w-5 h-5" />
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            );
          }

          return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
              <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-2xl shadow-xl p-8">
                  <div className="text-center mb-8">
                    <h2 className="text-3xl font-bold text-gray-800 mb-4">
                      ¡Entrevista Completada!
                    </h2>
                    <p className="text-xl text-gray-600 mb-2">
                      Gracias, {userName}
                    </p>
                    <p className="text-gray-600">
                      Has respondido {Object.keys(responses).length} de {questions.length} preguntas
                    </p>
                  </div>

                  <div className="bg-gray-50 rounded-lg p-6 mb-8">
                    <h3 className="font-semibold text-gray-800 mb-4">Resumen de Respuestas</h3>
                    <div className="space-y-3">
                      {questions.map((q) => (
                        <div
                          key={q.id}
                          className={`p-4 rounded-lg border-2 ${
                            responses[q.id]
                              ? 'border-green-300 bg-green-50'
                              : 'border-gray-200 bg-white'
                          }`}
                        >
                          <div className="font-medium text-gray-800">
                            {q.id}. {q.text}
                          </div>
                          {responses[q.id] && (
                            <div className="flex items-center gap-2 text-green-600 text-sm">
                              <Check className="w-4 h-4" />
                              Respondida ({Math.round(responses[q.id].duration)}s grabados)
                              <div className="text-xs text-gray-500">
                                Archivo: Q{q.id}_{userName}.webm
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                  <div className="text-center">
                    <button
                      onClick={downloadZip}
                      disabled={isGeneratingZip}
                      className={`flex items-center gap-2 px-6 py-3 rounded-lg font-medium transition-all mx-auto ${
                        isGeneratingZip 
                          ? 'bg-gray-400 cursor-not-allowed' 
                          : 'bg-green-600 hover:bg-green-700 text-white'
                      }`}
                    >
                      <Download className="w-5 h-5" />
                      {isGeneratingZip ? 'Generando archivo...' : 'Descargar ZIP'}
                    </button>
                    <p className="text-sm text-gray-500 mt-3">
                      Se descargará un archivo ZIP con todos tus videos y un resumen
                    </p>
                  </div>
                </div>
              </div>
            </div>
          );
        };

        ReactDOM.render(<InterviewSystem />, document.getElementById('root'));
    </script>
</body>
</html>